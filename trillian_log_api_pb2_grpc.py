# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import trillian_log_api_pb2 as trillian__log__api__pb2


class TrillianLogStub(object):
  """Provides access to a Verifiable Log data structure as defined in the
  [Verifiable Data Structures](docs/papers/VerifiableDataStructures.pdf) paper.

  The API supports adding new entries to be integrated into the log's tree. It
  does not provide arbitrary tree modifications. Additionally, it has read
  operations such as obtaining tree leaves, inclusion/consistency proofs etc.
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.QueueLeaf = channel.unary_unary(
        '/trillian.TrillianLog/QueueLeaf',
        request_serializer=trillian__log__api__pb2.QueueLeafRequest.SerializeToString,
        response_deserializer=trillian__log__api__pb2.QueueLeafResponse.FromString,
        )
    self.AddSequencedLeaf = channel.unary_unary(
        '/trillian.TrillianLog/AddSequencedLeaf',
        request_serializer=trillian__log__api__pb2.AddSequencedLeafRequest.SerializeToString,
        response_deserializer=trillian__log__api__pb2.AddSequencedLeafResponse.FromString,
        )
    self.GetInclusionProof = channel.unary_unary(
        '/trillian.TrillianLog/GetInclusionProof',
        request_serializer=trillian__log__api__pb2.GetInclusionProofRequest.SerializeToString,
        response_deserializer=trillian__log__api__pb2.GetInclusionProofResponse.FromString,
        )
    self.GetInclusionProofByHash = channel.unary_unary(
        '/trillian.TrillianLog/GetInclusionProofByHash',
        request_serializer=trillian__log__api__pb2.GetInclusionProofByHashRequest.SerializeToString,
        response_deserializer=trillian__log__api__pb2.GetInclusionProofByHashResponse.FromString,
        )
    self.GetConsistencyProof = channel.unary_unary(
        '/trillian.TrillianLog/GetConsistencyProof',
        request_serializer=trillian__log__api__pb2.GetConsistencyProofRequest.SerializeToString,
        response_deserializer=trillian__log__api__pb2.GetConsistencyProofResponse.FromString,
        )
    self.GetLatestSignedLogRoot = channel.unary_unary(
        '/trillian.TrillianLog/GetLatestSignedLogRoot',
        request_serializer=trillian__log__api__pb2.GetLatestSignedLogRootRequest.SerializeToString,
        response_deserializer=trillian__log__api__pb2.GetLatestSignedLogRootResponse.FromString,
        )
    self.GetSequencedLeafCount = channel.unary_unary(
        '/trillian.TrillianLog/GetSequencedLeafCount',
        request_serializer=trillian__log__api__pb2.GetSequencedLeafCountRequest.SerializeToString,
        response_deserializer=trillian__log__api__pb2.GetSequencedLeafCountResponse.FromString,
        )
    self.GetEntryAndProof = channel.unary_unary(
        '/trillian.TrillianLog/GetEntryAndProof',
        request_serializer=trillian__log__api__pb2.GetEntryAndProofRequest.SerializeToString,
        response_deserializer=trillian__log__api__pb2.GetEntryAndProofResponse.FromString,
        )
    self.InitLog = channel.unary_unary(
        '/trillian.TrillianLog/InitLog',
        request_serializer=trillian__log__api__pb2.InitLogRequest.SerializeToString,
        response_deserializer=trillian__log__api__pb2.InitLogResponse.FromString,
        )
    self.QueueLeaves = channel.unary_unary(
        '/trillian.TrillianLog/QueueLeaves',
        request_serializer=trillian__log__api__pb2.QueueLeavesRequest.SerializeToString,
        response_deserializer=trillian__log__api__pb2.QueueLeavesResponse.FromString,
        )
    self.AddSequencedLeaves = channel.unary_unary(
        '/trillian.TrillianLog/AddSequencedLeaves',
        request_serializer=trillian__log__api__pb2.AddSequencedLeavesRequest.SerializeToString,
        response_deserializer=trillian__log__api__pb2.AddSequencedLeavesResponse.FromString,
        )
    self.GetLeavesByIndex = channel.unary_unary(
        '/trillian.TrillianLog/GetLeavesByIndex',
        request_serializer=trillian__log__api__pb2.GetLeavesByIndexRequest.SerializeToString,
        response_deserializer=trillian__log__api__pb2.GetLeavesByIndexResponse.FromString,
        )
    self.GetLeavesByRange = channel.unary_unary(
        '/trillian.TrillianLog/GetLeavesByRange',
        request_serializer=trillian__log__api__pb2.GetLeavesByRangeRequest.SerializeToString,
        response_deserializer=trillian__log__api__pb2.GetLeavesByRangeResponse.FromString,
        )
    self.GetLeavesByHash = channel.unary_unary(
        '/trillian.TrillianLog/GetLeavesByHash',
        request_serializer=trillian__log__api__pb2.GetLeavesByHashRequest.SerializeToString,
        response_deserializer=trillian__log__api__pb2.GetLeavesByHashResponse.FromString,
        )


class TrillianLogServicer(object):
  """Provides access to a Verifiable Log data structure as defined in the
  [Verifiable Data Structures](docs/papers/VerifiableDataStructures.pdf) paper.

  The API supports adding new entries to be integrated into the log's tree. It
  does not provide arbitrary tree modifications. Additionally, it has read
  operations such as obtaining tree leaves, inclusion/consistency proofs etc.
  """

  def QueueLeaf(self, request, context):
    """Adds a single leaf to the queue.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def AddSequencedLeaf(self, request, context):
    """Adds a single leaf with an assigned sequence number.
    Warning: This RPC is under development, don't use it.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def GetInclusionProof(self, request, context):
    """
    No direct equivalent at the storage level.


    Returns inclusion proof for a leaf with a given index in a given tree.
    If the requested tree_size is larger than the server is aware of,
    the response will include the known log root and an empty proof.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def GetInclusionProofByHash(self, request, context):
    """Returns inclusion proof for a leaf with a given Merkle hash in a given
    tree.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def GetConsistencyProof(self, request, context):
    """Returns consistency proof between two versions of a given tree.
    If the requested tree size is larger than the server is aware of,
    the response will include the known log root and an empty proof.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def GetLatestSignedLogRoot(self, request, context):
    """Returns the latest signed log root for a given tree. Corresponds to the
    ReadOnlyLogTreeTX.LatestSignedLogRoot storage interface.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def GetSequencedLeafCount(self, request, context):
    """Returns the total number of leaves that have been integrated into the
    given tree. Corresponds to the ReadOnlyLogTreeTX.GetSequencedLeafCount
    storage interface.
    DO NOT USE - FOR DEBUGGING/TEST ONLY
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def GetEntryAndProof(self, request, context):
    """Returns log entry and the corresponding inclusion proof for a given leaf
    index in a given tree. If the requested tree is unavailable but the leaf is
    in scope for the current tree, return a proof in that tree instead.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def InitLog(self, request, context):
    """
    Initialisation APIs.


    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def QueueLeaves(self, request, context):
    """
    Batch APIs. Correspond to `storage.ReadOnlyLogTreeTX` batch queries.


    Adds a batch of leaves to the queue.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def AddSequencedLeaves(self, request, context):
    """Stores leaves from the provided batch and associates them with the log
    positions according to the `LeafIndex` field. The indices must be
    contiguous.

    Warning: This RPC is under development, don't use it.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def GetLeavesByIndex(self, request, context):
    """Returns a batch of leaves located in the provided positions.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def GetLeavesByRange(self, request, context):
    """Returns a batch of leaves in a sequential range.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def GetLeavesByHash(self, request, context):
    """Returns a batch of leaves by their `merkle_leaf_hash` values.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_TrillianLogServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'QueueLeaf': grpc.unary_unary_rpc_method_handler(
          servicer.QueueLeaf,
          request_deserializer=trillian__log__api__pb2.QueueLeafRequest.FromString,
          response_serializer=trillian__log__api__pb2.QueueLeafResponse.SerializeToString,
      ),
      'AddSequencedLeaf': grpc.unary_unary_rpc_method_handler(
          servicer.AddSequencedLeaf,
          request_deserializer=trillian__log__api__pb2.AddSequencedLeafRequest.FromString,
          response_serializer=trillian__log__api__pb2.AddSequencedLeafResponse.SerializeToString,
      ),
      'GetInclusionProof': grpc.unary_unary_rpc_method_handler(
          servicer.GetInclusionProof,
          request_deserializer=trillian__log__api__pb2.GetInclusionProofRequest.FromString,
          response_serializer=trillian__log__api__pb2.GetInclusionProofResponse.SerializeToString,
      ),
      'GetInclusionProofByHash': grpc.unary_unary_rpc_method_handler(
          servicer.GetInclusionProofByHash,
          request_deserializer=trillian__log__api__pb2.GetInclusionProofByHashRequest.FromString,
          response_serializer=trillian__log__api__pb2.GetInclusionProofByHashResponse.SerializeToString,
      ),
      'GetConsistencyProof': grpc.unary_unary_rpc_method_handler(
          servicer.GetConsistencyProof,
          request_deserializer=trillian__log__api__pb2.GetConsistencyProofRequest.FromString,
          response_serializer=trillian__log__api__pb2.GetConsistencyProofResponse.SerializeToString,
      ),
      'GetLatestSignedLogRoot': grpc.unary_unary_rpc_method_handler(
          servicer.GetLatestSignedLogRoot,
          request_deserializer=trillian__log__api__pb2.GetLatestSignedLogRootRequest.FromString,
          response_serializer=trillian__log__api__pb2.GetLatestSignedLogRootResponse.SerializeToString,
      ),
      'GetSequencedLeafCount': grpc.unary_unary_rpc_method_handler(
          servicer.GetSequencedLeafCount,
          request_deserializer=trillian__log__api__pb2.GetSequencedLeafCountRequest.FromString,
          response_serializer=trillian__log__api__pb2.GetSequencedLeafCountResponse.SerializeToString,
      ),
      'GetEntryAndProof': grpc.unary_unary_rpc_method_handler(
          servicer.GetEntryAndProof,
          request_deserializer=trillian__log__api__pb2.GetEntryAndProofRequest.FromString,
          response_serializer=trillian__log__api__pb2.GetEntryAndProofResponse.SerializeToString,
      ),
      'InitLog': grpc.unary_unary_rpc_method_handler(
          servicer.InitLog,
          request_deserializer=trillian__log__api__pb2.InitLogRequest.FromString,
          response_serializer=trillian__log__api__pb2.InitLogResponse.SerializeToString,
      ),
      'QueueLeaves': grpc.unary_unary_rpc_method_handler(
          servicer.QueueLeaves,
          request_deserializer=trillian__log__api__pb2.QueueLeavesRequest.FromString,
          response_serializer=trillian__log__api__pb2.QueueLeavesResponse.SerializeToString,
      ),
      'AddSequencedLeaves': grpc.unary_unary_rpc_method_handler(
          servicer.AddSequencedLeaves,
          request_deserializer=trillian__log__api__pb2.AddSequencedLeavesRequest.FromString,
          response_serializer=trillian__log__api__pb2.AddSequencedLeavesResponse.SerializeToString,
      ),
      'GetLeavesByIndex': grpc.unary_unary_rpc_method_handler(
          servicer.GetLeavesByIndex,
          request_deserializer=trillian__log__api__pb2.GetLeavesByIndexRequest.FromString,
          response_serializer=trillian__log__api__pb2.GetLeavesByIndexResponse.SerializeToString,
      ),
      'GetLeavesByRange': grpc.unary_unary_rpc_method_handler(
          servicer.GetLeavesByRange,
          request_deserializer=trillian__log__api__pb2.GetLeavesByRangeRequest.FromString,
          response_serializer=trillian__log__api__pb2.GetLeavesByRangeResponse.SerializeToString,
      ),
      'GetLeavesByHash': grpc.unary_unary_rpc_method_handler(
          servicer.GetLeavesByHash,
          request_deserializer=trillian__log__api__pb2.GetLeavesByHashRequest.FromString,
          response_serializer=trillian__log__api__pb2.GetLeavesByHashResponse.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'trillian.TrillianLog', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
