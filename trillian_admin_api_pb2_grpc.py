# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import trillian_admin_api_pb2 as trillian__admin__api__pb2
import trillian_pb2 as trillian__pb2


class TrillianAdminStub(object):
  """Trillian Administrative interface.
  Allows creation and management of Trillian trees (both log and map trees).
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.ListTrees = channel.unary_unary(
        '/trillian.TrillianAdmin/ListTrees',
        request_serializer=trillian__admin__api__pb2.ListTreesRequest.SerializeToString,
        response_deserializer=trillian__admin__api__pb2.ListTreesResponse.FromString,
        )
    self.GetTree = channel.unary_unary(
        '/trillian.TrillianAdmin/GetTree',
        request_serializer=trillian__admin__api__pb2.GetTreeRequest.SerializeToString,
        response_deserializer=trillian__pb2.Tree.FromString,
        )
    self.CreateTree = channel.unary_unary(
        '/trillian.TrillianAdmin/CreateTree',
        request_serializer=trillian__admin__api__pb2.CreateTreeRequest.SerializeToString,
        response_deserializer=trillian__pb2.Tree.FromString,
        )
    self.UpdateTree = channel.unary_unary(
        '/trillian.TrillianAdmin/UpdateTree',
        request_serializer=trillian__admin__api__pb2.UpdateTreeRequest.SerializeToString,
        response_deserializer=trillian__pb2.Tree.FromString,
        )
    self.DeleteTree = channel.unary_unary(
        '/trillian.TrillianAdmin/DeleteTree',
        request_serializer=trillian__admin__api__pb2.DeleteTreeRequest.SerializeToString,
        response_deserializer=trillian__pb2.Tree.FromString,
        )
    self.UndeleteTree = channel.unary_unary(
        '/trillian.TrillianAdmin/UndeleteTree',
        request_serializer=trillian__admin__api__pb2.UndeleteTreeRequest.SerializeToString,
        response_deserializer=trillian__pb2.Tree.FromString,
        )


class TrillianAdminServicer(object):
  """Trillian Administrative interface.
  Allows creation and management of Trillian trees (both log and map trees).
  """

  def ListTrees(self, request, context):
    """Lists all trees the requester has access to.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def GetTree(self, request, context):
    """Retrieves a tree by ID.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def CreateTree(self, request, context):
    """Creates a new tree.
    System-generated fields are not required and will be ignored if present,
    e.g.: tree_id, create_time and update_time.
    Returns the created tree, with all system-generated fields assigned.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def UpdateTree(self, request, context):
    """Updates a tree.
    See Tree for details. Readonly fields cannot be updated.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def DeleteTree(self, request, context):
    """Soft-deletes a tree.
    A soft-deleted tree may be undeleted for a certain period, after which
    it'll be permanently deleted.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def UndeleteTree(self, request, context):
    """Undeletes a soft-deleted a tree.
    A soft-deleted tree may be undeleted for a certain period, after which
    it'll be permanently deleted.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_TrillianAdminServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'ListTrees': grpc.unary_unary_rpc_method_handler(
          servicer.ListTrees,
          request_deserializer=trillian__admin__api__pb2.ListTreesRequest.FromString,
          response_serializer=trillian__admin__api__pb2.ListTreesResponse.SerializeToString,
      ),
      'GetTree': grpc.unary_unary_rpc_method_handler(
          servicer.GetTree,
          request_deserializer=trillian__admin__api__pb2.GetTreeRequest.FromString,
          response_serializer=trillian__pb2.Tree.SerializeToString,
      ),
      'CreateTree': grpc.unary_unary_rpc_method_handler(
          servicer.CreateTree,
          request_deserializer=trillian__admin__api__pb2.CreateTreeRequest.FromString,
          response_serializer=trillian__pb2.Tree.SerializeToString,
      ),
      'UpdateTree': grpc.unary_unary_rpc_method_handler(
          servicer.UpdateTree,
          request_deserializer=trillian__admin__api__pb2.UpdateTreeRequest.FromString,
          response_serializer=trillian__pb2.Tree.SerializeToString,
      ),
      'DeleteTree': grpc.unary_unary_rpc_method_handler(
          servicer.DeleteTree,
          request_deserializer=trillian__admin__api__pb2.DeleteTreeRequest.FromString,
          response_serializer=trillian__pb2.Tree.SerializeToString,
      ),
      'UndeleteTree': grpc.unary_unary_rpc_method_handler(
          servicer.UndeleteTree,
          request_deserializer=trillian__admin__api__pb2.UndeleteTreeRequest.FromString,
          response_serializer=trillian__pb2.Tree.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'trillian.TrillianAdmin', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
